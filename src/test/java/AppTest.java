/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.apache.avro.Schema;
import org.apache.avro.file.DataFileReader;
import org.apache.avro.file.DataFileWriter;
import org.apache.avro.generic.*;
import org.apache.avro.io.BinaryEncoder;
import org.apache.avro.io.DatumReader;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.io.EncoderFactory;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.specific.SpecificDatumReader;
import org.apache.avro.specific.SpecificDatumWriter;
import org.junit.Test;
import top.xhbeta.demo.avro.App;
import top.xhbeta.demo.avro.User;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import static org.junit.Assert.*;

public class AppTest {
    @Test
    public void writeSingleObjectFile() throws IOException {
        Schema schema = new Schema.Parser().parse(new File("src/main/avro/user.avsc"));

        GenericRecord user1 = new GenericData.Record(schema);
        user1.put("name", "Alyssa");
        user1.put("favorite_number", 256);

        String filePath = "build/single_user1.avro";
        File file = new File(filePath);
        FileOutputStream fileOutputStream = new FileOutputStream(file);

        BinaryMessageEncoder<GenericRecord> binaryMessageEncoder = new BinaryMessageEncoder<>(GenericData.get(), schema);
        binaryMessageEncoder.encode(user1, fileOutputStream);
        fileOutputStream.close();

        // 读取
        FileInputStream fis = new FileInputStream(file);
        Schema schema2 = new Schema.Parser().parse(new File("src/main/avro/user2.avsc"));
        BinaryMessageDecoder<GenericRecord> binaryMessageDecoder = new BinaryMessageDecoder<>(GenericData.get(), schema2);
        binaryMessageDecoder.addSchema(schema);
        GenericRecord user1new =  binaryMessageDecoder.decode(fis);


        System.out.println(user1new);
    }

    @Test
    public void readOldSchemaFile() throws IOException {
        Schema schema = new Schema.Parser().parse(new File("src/main/avro/user2.avsc"));

        String filePath = "build/users_schema.avro";
        File file = new File(filePath);

        DatumReader<GenericRecord> datumReader = new GenericDatumReader<GenericRecord>(schema);
        DataFileReader<GenericRecord> dataFileReader = new DataFileReader<GenericRecord>(file, datumReader);
        GenericRecord user = null;
        while (dataFileReader.hasNext()) {
            // Reuse user object by passing it to next(). This saves us from
            // allocating and garbage collecting many objects for files with
            // many items.
            user = dataFileReader.next(user);
            System.out.println(user);
        }
    }

    @Test
    public void avroUseSchemaFile() throws IOException {
        Schema schema = new Schema.Parser().parse(new File("src/main/avro/user.avsc"));


        assert schema != null;

        GenericRecord user1 = new GenericData.Record(schema);
        user1.put("name", "Alyssa");
        user1.put("favorite_number", 256);

        // GenericRecord user2 = new GenericData.Record(schema);
        // user2.put("name", "Ben");
        // user2.put("favorite_number", 7);
        // user2.put("favorite_color", "red");


        String filePath = "build/users_schema.avro";
        File file = new File(filePath);
        FileOutputStream fileOutputStream = new FileOutputStream(file);

        DatumWriter<GenericRecord> datumWriter = new GenericDatumWriter<GenericRecord>(schema);

        DataFileWriter<GenericRecord> dataFileWriter = new DataFileWriter<GenericRecord>(datumWriter);
        dataFileWriter.create(schema, file);
        dataFileWriter.append(user1);
        // dataFileWriter.append(user2);
        dataFileWriter.close();


        // Deserialize users from disk
        DatumReader<GenericRecord> datumReader = new GenericDatumReader<GenericRecord>(schema);
        DataFileReader<GenericRecord> dataFileReader = new DataFileReader<GenericRecord>(file, datumReader);
        GenericRecord user = null;
        while (dataFileReader.hasNext()) {
            // Reuse user object by passing it to next(). This saves us from
            // allocating and garbage collecting many objects for files with
            // many items.
            user = dataFileReader.next(user);
            System.out.println(user);

        }
    }

    @Test
    public void avroUseGeneratorJava() throws IOException {
        User user1 = new User();
        user1.setName("Alyssa");
        user1.setFavoriteNumber(256);
        // Leave favorite color null

        // Alternate constructor
        User user2 = new User("Ben", 7, "red");

        User user3 = User.newBuilder()
                .setFavoriteColor("red")
                .setFavoriteNumber(1)
                .setName("Hello")
                .build();

        String filePath = "build/users.avro";
        // Serialize user1, user2 and user3 to disk
        DatumWriter<User> userDatumWriter = new SpecificDatumWriter<User>(User.class);
        DataFileWriter<User> dataFileWriter = new DataFileWriter<User>(userDatumWriter);
        dataFileWriter.create(user1.getSchema(), new File(filePath));
        dataFileWriter.append(user1);
        dataFileWriter.append(user2);
        dataFileWriter.append(user3);
        dataFileWriter.close();


        // 然后，读取回来
        // Deserialize Users from disk
        File file = new File(filePath);
        DatumReader<User> userDatumReader = new SpecificDatumReader<User>(User.class);
        DataFileReader<User> dataFileReader = new DataFileReader<User>(file, userDatumReader);
        User user = null;
        while (dataFileReader.hasNext()) {
            // Reuse user object by passing it to next(). This saves us from
            // allocating and garbage collecting many objects for files with
            // many items.
            user = dataFileReader.next(user);
            System.out.println(user);
        }
    }
}
